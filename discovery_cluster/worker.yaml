#cloud-config

hostname: %HOSTNAME%

ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9haOFUv8E17gBsMRKyVCta9EVYXF10nQJyZyYiooroVDrCb+h4DLUvhrIGXkR3HZviCZiQBjhpV/lbmAfEvc4JBlBdxKahpZ0I3h+Xm0tuhyDgIwCveAsPgVApjtetnBwHavncKuEqCYL9kez1AgDPknoL69/P3EfH5CNh+sLMkrlA5VNJ1izpUWYCSg71dWBN/2HEAxK2OgeKHkEFYwa36UnwswIXMX5SYte5MNmSEYeYhSWLmxbEi5oj1P6I7QMqsO08GMGaEWCNt+/E3l6X4HmxM78Xaxcbm13nKcAoz/tsSDkteZRIZAhTSMsdvZq/buNSRsKXtG4DBJlmp5F rodrigo@phoenix
users:
  - name: "sysadm"
    passwd: "$1$gTl7Qanp$t7EqB9bqKGdyFUbFC4rH0."
    groups:
      - "sudo"
      - "docker"
    ssh-authorized-keys:
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9haOFUv8E17gBsMRKyVCta9EVYXF10nQJyZyYiooroVDrCb+h4DLUvhrIGXkR3HZviCZiQBjhpV/lbmAfEvc4JBlBdxKahpZ0I3h+Xm0tuhyDgIwCveAsPgVApjtetnBwHavncKuEqCYL9kez1AgDPknoL69/P3EfH5CNh+sLMkrlA5VNJ1izpUWYCSg71dWBN/2HEAxK2OgeKHkEFYwa36UnwswIXMX5SYte5MNmSEYeYhSWLmxbEi5oj1P6I7QMqsO08GMGaEWCNt+/E3l6X4HmxM78Xaxcbm13nKcAoz/tsSDkteZRIZAhTSMsdvZq/buNSRsKXtG4DBJlmp5F rodrigo@phoenix

write_files:

  - path: /etc/hosts
    content: |
         192.168.1.5     node1 node1.ellesmera.intranet
         10.1.0.5        worker1  worker1.ellesmera.intranet
         192.168.1.6     node2 node2.ellesmera.intranet
         10.1.0.6        worker2 worker2.ellesmera.intranet
         192.168.1.7     node3 node3.ellesmera.intranet
         10.1.0.7        worker3 worker3.ellesmera.intranet
         192.168.1.20    kubemaster1 kubemaster1.ellesmera.intranet
         10.1.0.20       master1 master1.ellesmera.intranet

  - path: /etc/resolv.conf
    content: |
      nameserver 192.168.1.1

  # Create directories structure
  - path: /opt/bin/create_dirs.sh
    owner: root
    permissions: 0755
    content: |
        #! /usr/bin/bash
        # Automated creatre directories

            mkdir -p /etc/kubernetes/
            mkdir /etc/kubernetes/ssl/
            mkdir -p /etc/flannel/
            mkdir -p /etc/systemd/system/docker.service.d/
            mkdir -p /etc/kubernetes/cni/net.d/
            mkdir -p /etc/kubernetes/manifests/

  - path: /etc/flannel/options.env
    owner: root
    content: |
            FLANNELD_IFACE=${ADVERTISE_IP}
            FLANNELD_ETCD_ENDPOINTS=${ETCD_ENDPOINTS}

  - path: /etc/systemd/system/flanneld.service.d/40-ExecStartPre-symlink.conf
    content: |
      [Service]
      ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env

  - path: /etc/systemd/system/docker.service.d/40-flannel.conf
    content: |
      [Unit]
      Requires=flanneld.service
      After=flanneld.service
      [Service]
      EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env

  - path: /etc/kubernetes/cni/docker_opts_cni.env
    owner: root
    content: |
      DOCKER_OPT_BIP=""
      DOCKER_OPT_IPMASQ=""

  - path: /etc/kubernetes/cni/net.d/10-flannel.conf
    owner: root
    content: |
      {
          "name": "podnet",
          "type": "flannel",
          "delegate": {
              "isDefaultGateway": true
          }
      }

  # Set up Kubelet service
  - path: /etc/systemd/system/kubelet.service
    content: |
      [Service]
      Environment=KUBELET_IMAGE_TAG=${K8S_VER}
      Environment="RKT_RUN_ARGS=--uuid-file-save=/var/run/kubelet-pod.uuid \
        --volume dns,kind=host,source=/etc/resolv.conf \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume var-log,kind=host,source=/var/log \
        --mount volume=var-log,target=/var/log \
        --volume cni-bin,kind=host,source=/opt/cni/bin \
        --mount volume=cni-bin,target=/opt/cni/bin"
      ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
      ExecStartPre=/usr/bin/mkdir -p /var/log/containers
      ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
      ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --api-servers=https://${MASTER_HOST} \
        --cni-conf-dir=/etc/kubernetes/cni/net.d \
        --network-plugin=${NETWORK_PLUGIN} \
        --container-runtime=docker \
        --register-node=true \
        --allow-privileged=true \
        --pod-manifest-path=/etc/kubernetes/manifests \
        --hostname-override=${ADVERTISE_IP} \
        --cluster_dns=${DNS_SERVICE_IP} \
        --cluster_domain=cluster.local \
        --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
        --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
        --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem
      ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
      Restart=always
      RestartSec=10

      [Install]
      WantedBy=multi-user.target

  # Set up Kube-Proxy
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    owner: root
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: quay.io/coreos/hyperkube:${K8S_VER}
          command:
          - /hyperkube
          - proxy
          - --master=${MASTER_HOST}
          - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /etc/ssl/certs
            name: "ssl-certs"
          - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
            name: "kubeconfig"
            readOnly: true
          - mountPath: /etc/kubernetes/ssl
            name: "etc-kube-ssl"
            readOnly: true
        volumes:
        - name: "ssl-certs"
          hostPath:
            path: "/usr/share/ca-certificates"
        - name: "kubeconfig"
          hostPath:
            path: "/etc/kubernetes/worker-kubeconfig.yaml"
        - name: "etc-kube-ssl"
          hostPath:
            path: "/etc/kubernetes/ssl"

  - path: /etc/kubernetes/worker-kubeconfig.yaml
    owner: root
    content: |
      apiVersion: v1
      kind: Config
      clusters:
      - name: local
        cluster:
          certificate-authority: /etc/kubernetes/ssl/ca.pem
      users:
      - name: kubelet
        user:
          client-certificate: /etc/kubernetes/ssl/worker.pem
          client-key: /etc/kubernetes/ssl/worker-key.pem
      contexts:
      - context:
          cluster: local
          user: kubelet
        name: kubelet-context
      current-context: kubelet-context

  # Install kubelet and kubectl binaries
  - path: /opt/bin/kubernetes-install.sh
    owner: root
    content: |
      #! /usr/bin/bash

      if [ ! -f /opt/bin/kubelet ]; then
        echo "Kubenetes not installed - installing."

        # Extract the Kubernetes binaries.
        wget -N -P /opt/bin http://storage.googleapis.com/kubernetes-release/release/v1.6.1/bin/linux/amd64/kubectl
        wget -N -P /opt/bin http://storage.googleapis.com/kubernetes-release/release/v1.6.1/bin/linux/amd64/kubelet
        chmod +x /opt/bin/kubelet /opt/bin/kubectl
      fi

  - path: /opt/bin/calico-install.sh
    owner: root
    content: |
      #! /usr/bin/bash

      if [ ! -f /opt/bin/calicoctl ]; then
        echo "Calico not installed - installing."

        # Install the `calicoctl` binary
        wget https://github.com/projectcalico/calicoctl/releases/download/v1.0.2/calicoctl
        chmod +x calicoctl
        mv calicoctl /opt/bin

        # Fetch the calico/node container
        sudo docker pull calico/node:v0.14.0
      fi

  - path: /etc/kubernetes/ssl/kubeconfig.sh
    owner: root
    content: |
        #!/usr/bin/bash

        #set -x

        ###################################
        # Script configuracao Kubernetes
        ###################################

        function main()
        {
          echo "Begin Setup"
          echo 'core:core' | chpasswd

          ADV_IP=192.168.1.%IP_ADDR%
          MASTER=192.168.1.20
          ETCD_END=http://10.1.0.5:2379,http://10.1.0.6:2379,http://10.1.0.7:2379
          K8S=v1.6.1_coreos.0
          NETWORK=
          SERVICE_IP=10.3.0.0/24
          DNS_SERVICE=10.3.0.10
          WORKER_SIZE=%SIZE%

          create_dirs

        }
        function create_dirs()
        {

          # Automated creatre directories
          sh create_dirs

          kubernetes_setup

        }

        function kubernetes_setup()
        {

          echo "Flannel Network Configuration ..."
          eval sed -i -e 's#\\\${ADVERTISE_IP}#"$ADV_IP"#g' /etc/flannel/options.env
          eval sed -i -e 's#\\\${ETCD_ENDPOINTS}#"$ETCD_END"#g' /etc/flannel/options.env

          echo "Create the kubelet Unit ..."
          eval sed -i -e 's#\\\${ADVERTISE_IP}#"$ADV_IP"#g' /etc/systemd/system/kubelet.service
          eval sed -i -e 's#\\\${MASTER_HOST}#"$MASTER"#g' /etc/systemd/system/kubelet.service
          eval sed -i -e 's#\\\${DNS_SERVICE_IP}#"$DNS_SERVICE"#g' /etc/systemd/system/kubelet.service
          eval sed -i -e 's#\\\${K8S_VER}#"$K8S"#g' /etc/systemd/system/kubelet.service
          eval sed -i -e 's#\\\${NETWORK_PLUGIN}#"$NETWORK"#g' /etc/systemd/system/kubelet.service

          echo "Configure Kubelet proxy"
          eval sed -i -e 's#\\\${MASTER_HOST}#"$MASTER"#g' /etc/kubernetes/manifests/kube-proxy.yaml
          eval sed -i -e 's#\\\${K8S_VER}#"$K8S"#g' /etc/kubernetes/manifests/kube-proxy.yaml

          daemon_reload

        }

        function daemon_reload()
        { 

          echo "Saving settings ..."
          systemctl daemon-reload

        }

        function setupkube()
        {
          sh kubernetes-install.sh
          #sh calico-install.sh

          find ~core/ -type f -name '*.tgz' -exec sudo tar xfv {} \;

          chmod 600 /etc/kubernetes/ssl/*-key.pem
          chown root:root /etc/kubernetes/ssl/*-key.pem

          ln -s $(hostname)-worker.pem worker.pem
          ln -s $(hostname)-worker-key.pem worker-key.pem

          daemon_reload

        }

        function daemon_reload() {

          echo "Saving settings ..."
          eval systemctl daemon-reload
          systemctl enable kubelet

          echo "Starting services ...";

        }

        ############### Start Script ####################
        $@

coreos:
  update:
      reboot-strategy: off

  units:
    - name: static.network
      content: |
        [Match]
        Name=eth0
        [Network]
        Address=10.1.0.%IP_ADDR%/24

    - name: 11-static.network
      content: |
        [Match]
        Name=eth1
        [Network]
        Address=10.2.0.%IP_ADDR%/24

    - name: 13-static.network
      content: |
        [Match]
        Name=eth2
        [Network]
        Address=192.168.1.%IP_ADDR%/24
        Gateway=192.168.1.1

    - name: cpu-governor.service
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Enable CPU power saving

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/modprobe cpufreq_powersave

    - name: systemd-networkd.service
      command: start
      enable: true
    
    - name: flanneld.service
      drop-ins:
      - name: 50-network-config.conf
        content: |
          [Service]
          ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.0.1.0/16", "Backend": {"Type": "vxlan"}}'
      command: start

    - name: kubeconfig.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Execute Kubeconfig Service
        After=systemd-networkd.service
        Requires=systemd-networkd.service

        [Service]
        Type=forking
        WorkingDirectory=/etc/kubernetes/ssl/
        ExecStartPre=/bin/bash kubeconfig.sh
        ExecStart=/bin/bash kubeconfig.sh main
        ExecReload=/bin/bash kubeconfig.sh main
        KillMode=process
        RemainAfterExit=yes
        
    - name: etcd2.service
      command: restart
      enable: true

    - name: fleet.service
      command: start
      enable: true

    - name: kubeconfig.service
      command: start
      enable: true

    - name: kubelet.service
      command: start
      enable: true

  etcd2:
    name: %HOSTNAME%
    advertise-client-urls: http://%HOSTNAME%:2379
    initial-advertise-peer-urls: http://%HOSTNAME%:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://0.0.0.0:2380
    discovery: %DISCOVERY%
  fleet:
    public-ip: %HOSTNAME%
