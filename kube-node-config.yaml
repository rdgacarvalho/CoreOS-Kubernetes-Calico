#cloud-config
hostname: "worker1.ellesmera.intranet"
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWM7xMnzcy1hTjxoV7/Cc8lSeoWhUUPsoNbFSkL9wiLq++SqscipEeA3HRYlI7X9VJbhCWRYAA5AKj7hGMZ60sByzvo8nSJVN54zcOfH5wnJKdO3FJeQfYkyqYsBpC8Kg0+dILtvhxgf5KenFQkPnb8DXmNExvm/jzJgu2YbOSmKcSvt9zQnHTj7AAILC8GozYonJEzE5Yo8JiKUbVSBq9lL54dbi/47QhfhIjKbK7n4+tbsU/aLPKauv+NW2jj69tIycg6WnoarSeUNZy8/zUtcMqwfrilxuDw+9Gl+o+aXeVbwpkOw6D0bPeWkOwY0CkdyOKfwiW5tP4VUF70VOr drigocar@AC049707

users:
  - name: "rodrigo"
    passwd: "$1$ZTRJ37/b$CszXZYtjXgXp7ieUlSNZ51"
    groups:
      - "sudo"
      - "docker"
    ssh-authorized-keys:
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWM7xMnzcy1hTjxoV7/Cc8lSeoWhUUPsoNbFSkL9wiLq++SqscipEeA3HRYlI7X9VJbhCWRYAA5AKj7hGMZ60sByzvo8nSJVN54zcOfH5wnJKdO3FJeQfYkyqYsBpC8Kg0+dILtvhxgf5KenFQkPnb8DXmNExvm/jzJgu2YbOSmKcSvt9zQnHTj7AAILC8GozYonJEzE5Yo8JiKUbVSBq9lL54dbi/47QhfhIjKbK7n4+tbsU/aLPKauv+NW2jj69tIycg6WnoarSeUNZy8/zUtcMqwfrilxuDw+9Gl+o+aXeVbwpkOw6D0bPeWkOwY0CkdyOKfwiW5tP4VUF70VOr drigocar@AC049707
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD037qxy/sqLljZ/50+jFFTArgx0SYRytQcRIbIvUusdLG5CK/oHF+ZfSNZLNQUFuKyaUOJWXaug7VOzqIGliaNvXsoB5iKTP5RXdFXdZ2oCzPx/bXbCdxqfvV78GVIb0o/r4xI8xlR326gwDhDpb/Oy0R2PP98VBLhIWc1T5C4zGESd/IuPmWHEYl4c4ctG1qVgaOIz52RawM22Q/4jXpAbitFiKMJxyz6olQy61zZ9e77u9Ad4c2cHW8gTGiz8eYCR5dTHV38jFk7NxwHzYWdHQ0XmbVRXgzHuLQjCwfkpuqDvZujoam8deDwcdbESgqalugLKHANv8+bjiqnc1EZ root@glaedr.ellesmera

write_files:

  - path: /etc/hosts
    content: |
         192.168.1.5     node1 node1.ellesmera.intranet
         10.1.0.5        worker1  worker1.ellesmera.intranet
         192.168.1.6     node2 node2.ellesmera.intranet
         10.1.0.6        worker2 worker2.ellesmera.intranet
         192.168.1.7     node3 node3.ellesmera.intranet
         10.1.0.7        worker3 worker3.ellesmera.intranet
         192.168.1.20    kubemaster kubemaster.ellesmera.intranet
         10.1.0.20       master1 master1.ellesmera.intranet

  - path: /etc/resolv.conf
    content: |
      nameserver 189.38.95.95
      nameserver 10.1.0.1

  # cria diretorios
  - path: /opt/bin/create_dirs.sh
    owner: root
    permissions: 0755
    content: |
        #! /usr/bin/bash
        # Automated creatre directories

            mkdir -p /etc/kubernetes/
            mkdir /etc/kubernetes/ssl/
            mkdir -p /etc/flannel/
            mkdir -p /etc/systemd/system/docker.service.d/
            mkdir -p /etc/kubernetes/cni/net.d/
            mkdir -p /etc/kubernetes/manifests/

  # inicio configuracao kubelet
  - path: /etc/systemd/system/kubelet.service
    content: |
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests

        Environment=KUBELET_VERSION=${K8S_VER}
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=https://${MASTER_HOST} \
          --network-plugin-dir=/etc/kubernetes/cni/net.d \
          --network-plugin=${NETWORK_PLUGIN} \
          --register-node=true \
          --allow-privileged=true \
          --config=/etc/kubernetes/manifests \
          --hostname-override=${ADVERTISE_IP} \
          --cluster-dns=${DNS_SERVICE_IP} \
          --cluster-domain=cluster.local \
          --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
          --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
          --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target

  # inicio configuracao calico cni
  - path: /etc/kubernetes/cni/net.d/10-calico.conf
    owner: root
    content: |
        {
            "name": "calico",
            "type": "flannel",
            "delegate": {
                "type": "calico",
                "etcd_endpoints": "${ETCD_ENDPOINTS}",
                "log_level": "none",
                "log_level_stderr": "info",
                "hostname": "${ADVERTISE_IP}",
                "policy": {
                    "type": "k8s",
                    "k8s_api_root": "https://${MASTER_HOST}:443/api/v1/",
                    "k8s_client_key": "/etc/kubernetes/ssl/worker-key.pem",
                    "k8s_client_certificate": "/etc/kubernetes/ssl/worker.pem"
                }
            }
        }

  - path: /etc/flannel/options.env
    owner: root
    content: |
            FLANNELD_IFACE=${ADVERTISE_IP}
            FLANNELD_ETCD_ENDPOINTS=${ETCD_ENDPOINTS}

  - path: /etc/systemd/system/flanneld.service.d/40-ExecStartPre-symlink.conf
    content: |
            [Service]
            ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env

  - path: /etc/systemd/system/docker.service.d/40-flannel.conf
    content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service

# inicio configuracao proxy
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    owner: root
    content: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-proxy
          namespace: kube-system
        spec:
          hostNetwork: true
          containers:
          - name: kube-proxy
            image: quay.io/coreos/hyperkube:v1.5.1_coreos.0
            command:
            - /hyperkube
            - proxy
            - --master=https://${MASTER_HOST}
            - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
            - --proxy-mode=iptables
            securityContext:
              privileged: true
            volumeMounts:
              - mountPath: /etc/ssl/certs
                name: "ssl-certs"
              - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
                name: "kubeconfig"
                readOnly: true
              - mountPath: /etc/kubernetes/ssl
                name: "etc-kube-ssl"
                readOnly: true
          volumes:
            - name: "ssl-certs"
              hostPath:
                path: "/usr/share/ca-certificates"
            - name: "kubeconfig"
              hostPath:
                path: "/etc/kubernetes/worker-kubeconfig.yaml"
            - name: "etc-kube-ssl"
              hostPath:
                path: "/etc/kubernetes/ssl"

# inicio configuracao worker
  - path: /etc/kubernetes/worker-kubeconfig.yaml
    owner: root
    content: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: local
          cluster:
            certificate-authority: /etc/kubernetes/ssl/ca.pem
        users:
        - name: kubelet
          user:
            client-certificate: /etc/kubernetes/ssl/worker.pem
            client-key: /etc/kubernetes/ssl/worker-key.pem
        contexts:
        - context:
            cluster: local
            user: kubelet
          name: kubelet-context
        current-context: kubelet-context

# inicio configuracao calico
  - path: /etc/systemd/system/calico-node.service
    owner: root
    content: |
        [Unit]
        Description=Calico node for network policy
        Requires=network-online.target
        After=network-online.target

        [Service]
        Slice=machine.slice
        Environment=CALICO_DISABLE_FILE_LOGGING=true
        Environment=HOSTNAME=${ADVERTISE_IP}
        Environment=IP=${ADVERTISE_IP}
        Environment=FELIX_FELIXHOSTNAME=${ADVERTISE_IP}
        Environment=CALICO_NETWORKING=false
        Environment=NO_DEFAULT_POOLS=true
        Environment=ETCD_ENDPOINTS=${ETCD_ENDPOINTS}
        ExecStart=/usr/bin/rkt run --inherit-env --stage1-from-dir=stage1-fly.aci \
        --volume=modules,kind=host,source=/lib/modules,readOnly=false \
        --mount=volume=modules,target=/lib/modules \
        --trust-keys-from-https quay.io/calico/node:v0.19.0
        KillMode=mixed
        Restart=always
        TimeoutStartSec=0

        [Install]
        WantedBy=multi-user.target

  # inicio Script automation

  - path: /opt/bin/kubernetes-install.sh
    owner: root
    permissions: 0755
    content: |
      #! /usr/bin/bash

      if [ ! -f /opt/bin/kubelet ]; then
        echo "Kubenetes not installed - installing."

        # Extract the Kubernetes binaries.
        sudo wget -N -P /opt/bin http://storage.googleapis.com/kubernetes-release/release/v1.5.1/bin/linux/amd64/kubectl
        sudo wget -N -P /opt/bin http://storage.googleapis.com/kubernetes-release/release/v1.5.1/bin/linux/amd64/kubelet
        sudo chmod +x /opt/bin/kubelet /opt/bin/kubectl
      fi

  - path: /opt/bin/calico-install.sh
    owner: root
    permissions: 0755
    content: |
      #! /usr/bin/bash

      if [ ! -f /opt/bin/calicoctl ]; then
        echo "Calico not installed - installing."

        # Install the `calicoctl` binary
        wget https://github.com/projectcalico/calico-containers/releases/download/v0.23.1/calicoctl
        chmod +x calicoctl
        sudo mv calicoctl /opt/bin

        # Fetch the calico/node container
        sudo docker pull calico/node:v0.14.0
      fi

  - path: /etc/kubernetes/ssl/kubeconfig.sh
    owner: root
    permissions: 0755
    content: |
        #!/usr/bin/bash

        set -x

        ###################################
        # Script configuracao Kubernetes
        ###################################

        function main()
        {
          echo "Begin Setup"
          echo 'core:core' | chpasswd

          create_dirs

        }
        function create_dirs()
        {

          # Automated creatre directories
          sh create_dirs

          kubernetes_setup

        }

        function kubernetes_setup()
        {

          ADV_IP=192.168.1.5
          MASTER=192.168.1.20
          ETCD_END=http://10.1.0.5:2379,http://10.1.0.6:2379,http://10.1.0.7:2379,http://10.1.0.20:2379
          K8S=v1.5.1_coreos.0
          NETWORK="cni"
          SERVICE_IP=10.3.0.0/24
          DNS_SERVICE=10.3.0.10

          echo "Flannel Network Configuration ..."
          eval sed -i -e 's#\\\${ADVERTISE_IP}#"$ADV_IP"#g' /etc/flannel/options.env
          eval sed -i -e 's#\\\${ETCD_ENDPOINTS}#"$ETCD_END"#g' /etc/flannel/options.env

          echo "Create the kubelet Unit ..."
          eval sed -i -e 's#\\\${ADVERTISE_IP}#"$ADV_IP"#g' /etc/systemd/system/kubelet.service
          eval sed -i -e 's#\\\${MASTER_HOST}#"$MASTER"#g' /etc/systemd/system/kubelet.service
          eval sed -i -e 's#\\\${DNS_SERVICE_IP}#"$DNS_SERVICE"#g' /etc/systemd/system/kubelet.service
          eval sed -i -e 's#\\\${K8S_VER}#"$K8S"#g' /etc/systemd/system/kubelet.service
          eval sed -i -e 's#\\\${NETWORK_PLUGIN}#"$NETWORK"#g' /etc/systemd/system/kubelet.service

          eval sed -i -e 's#\\\${ADVERTISE_IP}#"${ADV_IP}"#g' /etc/kubernetes/cni/net.d/10-calico.conf
          eval sed -i -e 's#\\\${ETCD_ENDPOINTS}#"${ETCD_END}"#g' /etc/kubernetes/cni/net.d/10-calico.conf
          eval sed -i -e 's#\\\${MASTER_HOST}#"${MASTER}"#g' /etc/kubernetes/cni/net.d/10-calico.conf

          echo "Set Up the kube-apiserver Pod ..."
          eval sed -i -e 's#\\\${MASTER_HOST}#"$MASTER"#g' /etc/kubernetes/manifests/kube-proxy.yaml

          echo "Set Up Calico Node Container (optional) ..."
          eval sed -i -e 's#\\\${ADVERTISE_IP}#"${ADV_IP}"#g' /etc/systemd/system/calico-node.service
          eval sed -i -e 's#\\\${ETCD_ENDPOINTS}#"${ETCD_END}"#g' /etc/systemd/system/calico-node.service
          eval sed -i -e 's#\\\${MASTER_HOST}#"${MASTER}"#g' /etc/systemd/system/calico-node.service

          install_kubernets

        }

        function install_kubernets()
        {
          sh kubernetes-install.sh
          sh calico-install.sh

          find ~core/ -type f -name '*.tgz' -exec sudo tar xfv {} \;

          chmod 600 /etc/kubernetes/ssl/*-key.pem
          chown root:root /etc/kubernetes/ssl/*-key.pem

          ln -s $(hostname)-worker.pem worker.pem
          ln -s $(hostname)-worker-key.pem worker-key.pem

          daemon_reload

        }

        function daemon_reload() {

          echo "Saving settings ..."
          eval systemctl daemon-reload

          echo "Starting services ...";

        }

        ############### Start Script ####################
        $@

coreos:
  update:
      reboot-strategy: off

  units:
    - name: static.network
      content: |
        [Match]
        Name=enp0s3
        [Network]
        Address=10.1.0.5/24
        Gateway=10.1.0.1

    - name: 11-static.network
      content: |
        [Match]
        Name=enp0s8
        [Network]
        Address=10.2.0.5/24

    - name: 13-static.network
      content: |
        [Match]
        Name=enp0s9
        [Network]
        Address=192.168.1.5/24

    - name: cpu-governor.service
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Enable CPU power saving

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/modprobe cpufreq_powersave

    - name: systemd-networkd.service
      command: start
      enable: true

    - name: kubeconfig.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Enable Kubeconfig Service
        After=systemd-networkd.service
        Requires=systemd-networkd.service

        [Service]
        Type=oneshot
        ExecStart=/etc/kubernetes/ssl/kubeconfig.sh main
        ExecReload=/etc/kubernetes/ssl/kubeconfig.sh main
        RemainAfterExit=yes

    - name: etcd2.service
      command: start
      enable: true

    - name: fleet.service
      command: start
      enable: true

    - name: flanneld.service
      drop-ins:
      - name: 50-network-config.conf
        content: |
          [Service]
          ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.0.1.0/16", "Backend": {"Type": "vxlan"}}'
      command: start

  etcd2:
     name: worker1
     initial-advertise-peer-urls: http://10.1.0.5:2380
     listen-peer-urls: http://10.1.0.5:2380
     listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
     advertise-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
     initial-cluster-token: cluster-ellesmera
     initial-cluster: worker1=http://10.1.0.5:2380,worker2=http://10.1.0.6:2380,worker3=http://10.1.0.7:2380,master1=http://10.1.0.20:2380
     initial-cluster-state: new
